import streamlit as st
import google.generativeai as genai
import json
import PIL.Image
from datetime import datetime

# Configure Google Gemini AI
GOOGLE_API_KEY = "AIzaSyAxLbA1Jk6I0SO292xcbmeBGeI9VBC0TFg"
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("models/gemini-1.5-flash-latest")

# Streamlit Page Configuration
st.set_page_config(page_title="Human Attribute Analyzer", page_icon="üë§", layout="centered")

# Custom Styling
st.markdown(
    """
    <style>
    body { font-family: 'Inter', sans-serif; background-color: #f4f4f4; }
    .stApp {  padding: 2rem; border-radius: 10px; }
    .section-title { font-size: 1.5rem; font-weight: bold; color: #333; margin-top: 1rem; }
    .attribute { font-size: 1rem; font-weight: 600; color: #222; }
    .confidence-bar { height: 8px; border-radius: 4px; background: #ddd; }
    .confidence-fill { height: 100%; background: #4CAF50; }
    .footer {
        text-align: center;
        color: #6b7280;
        margin-top: 30px;
    }
    </style>
    """,
    unsafe_allow_html=True
)
# Function to Analyze Human Attributes
def analyze_human_attributes(image, custom_prompt=None):
    base_prompt = """
    Analyze this image and provide human attributes in JSON format:
    {
        "gender": "Male",
        "age_estimate": 28,
        "ethnicity": "Asian",
        "mood": "Happy",
        "facial_expression": "Smiling",
        "glasses": false,
        "beard": true,
        "hair_color": "Black",
        "eye_color": "Brown",
        "confidence": 95
    }
    Important: Return only valid JSON output.
    """
    
    full_prompt = base_prompt + (f"\n{custom_prompt}" if custom_prompt else "")
    try:
        response = model.generate_content([full_prompt, image])
        return json.loads(response.text.replace('```json', '').replace('```', '').strip())
    except Exception as e:
        st.error(f"Error analyzing image: {str(e)}")
        return None

# UI Layout
st.title("üîç Human Attribute Analyzer")
st.markdown("Upload an image to analyze human attributes.")

uploaded_image = st.file_uploader("Upload an Image", type=["jpg", "jpeg", "png"])
custom_prompt = st.text_area("Custom Instructions (Optional)", "E.g., Focus on eye details")

if uploaded_image:
    img = PIL.Image.open(uploaded_image)
    st.image(img, caption="Uploaded Image", use_container_width=True)
    start_time = datetime.now()
    
    with st.spinner("Analyzing... This may take a moment."):
        result = analyze_human_attributes(img, custom_prompt)
    
    if result:
        st.success("‚úÖ Analysis Complete!")
        processing_time = (datetime.now() - start_time).total_seconds()
        confidence = result.get("confidence", 0)

        # Display Analysis
        st.markdown("### üìù Analysis Results")
        st.write(f"**Gender:** {result.get('gender', 'N/A')}")
        st.write(f"**Age Estimate:** {result.get('age_estimate', 'N/A')} years")
        st.write(f"**Ethnicity:** {result.get('ethnicity', 'N/A')}")
        st.write(f"**Mood:** {result.get('mood', 'N/A')}")
        st.write(f"**Facial Expression:** {result.get('facial_expression', 'N/A')}")
        
        # Appearance
        st.markdown("### üëÄ Appearance")
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**Hair Color:** {result.get('hair_color', 'N/A')}")
            st.write(f"**Eye Color:** {result.get('eye_color', 'N/A')}")
        with col2:
            st.write(f"**Glasses:** {'Yes' if result.get('glasses') else 'No'}")
            st.write(f"**Beard:** {'Yes' if result.get('beard') else 'No'}")
        
        # Confidence Level Visualization
        st.markdown("### üî¨ Confidence Level")
        st.write(f"AI Confidence: {confidence}%")
        st.markdown(
            f"""
            <div class='confidence-bar'>
                <div class='confidence-fill' style='width: {confidence}%;'></div>
            </div>
            """,
            unsafe_allow_html=True,
        )
        
        # Processing Stats
        st.caption(f"‚è±Ô∏è Processed in {processing_time:.2f} seconds")
        st.caption(f"üìè Image Resolution: {img.size[0]} x {img.size[1]} pixels")
        
        # Raw JSON Data
        with st.expander("üìÑ View Raw Analysis Data"):
            st.json(result)
    else:
        st.error("‚ùå Could not process the image. Please try again.")
else:
    st.info("üìå Upload an image to begin analysis.")

st.markdown("---")
st.markdown("""
<div class="footer">
    <p>¬© 2025 <a href="https://www.linkedin.com/in/rafay-nadeem-web-developer/" target="_blank">Abdul Rafay.</a> All Rights Reserved.</p>
    <p>Powered by <a href="https://ai.google.dev/" target="_blank">Google Gemini AI</a></p>
    <p>‚ö†Ô∏è The analysis results are generated by AI and should not be considered 100% accurate or definitive.</p>
</div>
""", unsafe_allow_html=True)
